// Ce fichier est structur√© de mani√®re √† simuler un pattern "Singleton" en tenant compte des limitations du JavaScript.

// Import de la feuille de style
import "../assets/css/style.css";

// La class n'est pas export√©e, ce qui emp√™che de l'importer et de l'instancier
// C'est l'√©quivalent d'un constructeur priv√© en PHP
class App {

    elInputNewPiTitle;
    elTextareaNewPiContent;
    elOlPiList;

    /**
     * D√©marrage de l'application
     */
    start() {
        console.log("D√©marrage de l'application");

        // Appel de la m√©thode pour effectuer le rendu de l'UI de base
        this.renderBaseUI();
    }
    
    /**
     * Effectue le rendu de l'UI de base
     */
    renderBaseUI() {
        /*
            Template:

            <header>
                <h1>Post-Its</h1>

                <form novalidate>
                    <input type="text" placeholder="Titre">
                    <textarea placeholder="Contenu"></textarea>
                    <button type="button">‚ûï</button>
                </form>

                <div>
                    <button type="button">üóëÔ∏è</button>
                </div>
            </header>

            <main>
                <ol id="nota-list"></ol>
            </main>
        */

        // -- <header> --
        const elHeader = document.createElement( 'header');

        elHeader.innerHTML = `<h1>Post-Its</h1>`;

        // -- <form> --
        const elForm = document.createElement( 'form' );
        elForm.noValidate = true;

        // -- <input> --
        this.elInputNewPiTitle = document.createElement( 'input' );
        this.elInputNewPiTitle.type = 'text';
        this.elInputNewPiTitle.placeholder = 'Titre';

        // -- <textarea> --
        this.elTextareaNewPiContent = document.createElement( 'textarea' );
        this.elTextareaNewPiContent.placeholder = 'Contenu';

        // -- <button> --
        const elBtnNewPiAdd = document.createElement( 'button' );
        elBtnNewPiAdd.type = 'button';
        elBtnNewPiAdd.textContent = '‚ûï';
        // .bind(this) permet de conserver la r√©f√©rence √† l'instance de la classe App
        elBtnNewPiAdd.addEventListener( 'click', this.handlerAddNewPostit.bind( this ) );

        // -- Injection <input> + <textarea> + <button> dans <form> --
        elForm.append( this.elInputNewPiTitle, this.elTextareaNewPiContent, elBtnNewPiAdd );

        // -- <div> --
        const elDivClear = document.createElement( 'div' );

        // -- <button> --
        const elBtnClear = document.createElement( 'button' );
        elBtnClear.type = 'button';
        elBtnClear.textContent = 'üóëÔ∏è';
        elBtnClear.addEventListener( 'click', this.handlerClear.bind( this ) );

        // -- Injection <button> dans <div> --
        elDivClear.append( elBtnClear );

        // -- Injection <form> + <div> dans <header> --
        elHeader.append( elForm, elDivClear );

        // -- <main> --
        const elMain = document.createElement( 'main' );


        // TODO: L'int√©rieur

        // -- Injection <header> + <main> dans le <body> --
        document.body.append( elHeader, elMain );
    }

    /**
     * Gestionnaire de l'√©v√©nement click sur le bouton "Ajouter un post-it"
     * @param {Event} evt Ev√©nement produit intercept√© par l'√©couteur
     */
    handlerAddNewPostit( evt ) {
        // TODO: le code
    }

    /**
     * Gestionnaire de l'√©v√©nement click sur le bouton "Effacer les post-its"
     * @param {Event} evt Ev√©nement produit intercept√© par l'√©couteur
     */
    handlerClear( evt ) {
        // TODO: le code
    }
}

// On cr√©e une instance de la class App dans une variable
// La variable est l'√©quivalent de la propri√©t√© statique "$instance" en PHP
const app = new App();

// On exporte cette variable.
// Si √† l'ext√©rieur il y a plusieurs import de cette variable,
// le syst√®me aura m√©moris√© le premier import et renverra la m√™me instance pour les imports suivants
// C'est l'√©quivalent de la m√©thode statique "getApp" en PHP
export default app;
